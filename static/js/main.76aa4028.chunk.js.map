{"version":3,"sources":["components/AccountBalance.js","components/Home.js","components/UserProfile.js","components/Login.js","components/Credits.js","components/Debits.js","App.js","reportWebVitals.js","index.js"],"names":["AccountBalance","this","props","accountBalance","Component","Home","src","alt","to","UserProfile","userName","memberSince","LogIn","handleChange","e","updatedUser","state","user","target","value","setState","handleSubmit","preventDefault","mockLogIn","redirect","password","onSubmit","type","name","defaultValue","onChange","Credits","credits","map","credit","description","amount","toFixed","date","key","newCredit","Number","Date","toISOString","length","addCredit","step","Debits","debits","debit","newDebit","addDebit","App","logInInfo","newUser","currentUser","updateAccountBalance","totalCredits","totalDebits","newCreditList","creditList","push","newDebitList","debitList","fetch","then","response","json","data","prevProps","prevState","basename","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76aa4028.chunk.js","sourcesContent":["/*==================================================\nsrc/components/AccountBalance.js\n\nThe AccountBalance component displays account balance. It is included in other page views.\n==================================================*/\nimport React, {Component} from 'react';\n\nclass AccountBalance extends Component {\n  // Display account balance\n  render() {\n    return (\n      <div>\n        Balance: {this.props.accountBalance}\n      </div>\n    );\n  }\n}\n\nexport default AccountBalance;","/*==================================================\nsrc/components/Home.js\n\nThe Home component is used to demonstrate the use of Link.\n==================================================*/\nimport React, {Component} from 'react';\nimport AccountBalance from './AccountBalance';\nimport {Link} from 'react-router-dom';\n\nclass Home extends Component {\n  render() {\n    return (\n      <div>\n        <img src=\"https://picsum.photos/200/200\" alt=\"bank\"/>\n\n        <h1>Bank of React</h1>\n\n        <Link to=\"/userProfile\">User Profile</Link>\n        <br/>\n        <Link to=\"/login\">Login</Link>\n        <br/>\n        <Link to=\"/credits\">Credits</Link>\n        <br/>\n        <Link to=\"/debits\">Debits</Link>\n        <br/><br/>\n        <AccountBalance accountBalance={this.props.accountBalance}/>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","/*==================================================\nsrc/components/UserProfile.js\n\nThe UserProfile component is used to demonstrate the use of Route and Link.\nNote: You don't need to work on this file for the Assignment.\n==================================================*/\nimport React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\n\nclass UserProfile extends Component {\n  render() {\n    return (\n      <div>\n        <h1>User Profile</h1>\n\n        <div>Username: {this.props.userName}</div>\n        <div>Member Since: {this.props.memberSince}</div>\n        <br/>\n        <Link to=\"/\">Return to Home</Link>\n      </div>\n    );\n  }\n}\n\nexport default UserProfile;","/*==================================================\nsrc/components/Login.js\n\nThe LogIn component is used to demonstrate the use of Redirect.\nNote: You don't need to work on this file for the Assignment.\n==================================================*/\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport {Link} from 'react-router-dom';\n\nclass LogIn extends Component {\n  constructor (props) {  // Create and initialize state\n    super(props)\n    this.state = {\n      user: {\n        //userName: '',\n        userName: this.props.user.userName,  // Initialize userName using props input (currentUser in App.js)\n        password: ''\n      },\n      redirect: false  // Redirect property used to trigger Redirect\n    }\n  }\n\n  // When User Name input is changed, capture the new input value and update state\n  handleChange = (e) => {\n    const updatedUser = {...this.state.user}  // Create an object for state\n    updatedUser.userName = e.target.value  // Set object's userName to the new input value\n    this.setState({user: updatedUser})  // Update state with object values\n  }\n\n  // When user clicked \"Log In\" button, store user data and then redirect to \"User Profile\" page\n  handleSubmit = (e) => {\n    e.preventDefault()\n    this.props.mockLogIn(this.state.user)  // Update state in the top-level component (App.js)\n    this.setState({redirect: true})  // Update state to trigger Redirect\n  }\n  \n  render () {\n    // Redirect to \"User Profile\" page when \"Log In\" button is clicked\n    if (this.state.redirect) {  \n      return (<Redirect to=\"/userProfile\"/>)\n    }\n\n    // Render the login form (and call \"handleSubmit\" method when \"Log In\" button is clicked to submit form)\n    return (\n      <div>\n        <h1>Login</h1>\n        \n        <form onSubmit={this.handleSubmit}>\n          <div>\n            <label>User Name</label>\n            <input type=\"text\" name=\"userName\" defaultValue={this.props.user.userName} onChange={this.handleChange} />\n          </div>\n          <div>\n            <label>Password</label>\n            <input type=\"password\" name=\"password\" />\n          </div>\n          <button>Log In</button>\n        </form>  \n        <br/>\n        <Link to=\"/\">Return to Home</Link>\n      </div>\n    )\n  }\n}\n\nexport default LogIn","/*==================================================\nsrc/components/Credits.js\n\nThe Credits component contains information for Credits page view.\nNote: You need to work on this file for the Assignment.\n==================================================*/\nimport {Link} from 'react-router-dom';\nimport AccountBalance from \"./AccountBalance\";\n\nconst Credits = (props) => {\n\n  // Create view for displaying credits passed by props\n  const creditsView = () => {\n    return(\n      props.credits \n      ? props.credits.map((credit) => (\n\t<tr key={credit.key}>\n\t      <td>{credit.credit.description}</td>\n\t      <td>{credit.credit.amount.toFixed(2)}</td>\n\t      <td>{credit.credit.date}</td>\n\t      </tr>\n      )) \n      : null\n    )\n  }\n\n  // Create view for displaying the account balance\n  const accountBalanceView = () => (<AccountBalance accountBalance={props.accountBalance} />);\n\n  // When user clicked \"Add credit\" button, store form data and then update state through props\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // Create new credits object using form data\n    let newCredit = {\n      description: e.target.description.value,\n      amount: Number(e.target.amount.value),\n      date: new Date().toISOString(),\n      key: props.credits.length,\n    }\n     \n    props.addCredit({credit: newCredit});  // Update state in the top-level component (App.js)\n     \n    // Reset form fields\n    e.target.description.value = \"\";\n    e.target.amount.value = \"\";\n  }\n\n\n  return (\n    <div>\n      <h1>Credits</h1>\n      <br/>\n      <table>\n\t<thead>\n\t  <tr>\n\t    <th>Description</th>\n\t    <th>Amount</th>\n\t    <th>Date</th>\n\t  </tr>\n        </thead>\n        <tbody>\n          {creditsView()}\n\t</tbody>\n      </table>\n      <br/>\n      <form onSubmit={handleSubmit}>\n\t<label name=\"description\">Description:</label>\n        <input type=\"text\" name=\"description\" />\n\t<label name=\"amount\">Amount:</label>\n        <input type=\"number\" step=\"0.01\" name=\"amount\" />\n        <button type=\"submit\">Add Credit</button>\n      </form>\n      <br/>\n      {accountBalanceView()}\n      <br/>\n\n      <Link to=\"/\">Return to Home</Link>\n    </div>\n  )\n}\n\nexport default Credits;\n","/*==================================================\nsrc/components/Debits.js\n\nThe Debits component contains information for Debits page view.\nNote: You need to work on this file for the Assignment.\n==================================================*/\nimport {Link} from 'react-router-dom';\nimport AccountBalance from \"./AccountBalance\";\n\nconst Debits = (props) => {\n  // Create the list of Debit items\n  const debitsView = () => {\n    return (\n\t    props.debits\n\t    ? props.debits.map((debit) => (  // Extract \"key\", \"amount\", \"description\" and \"date\" properties of each debits JSON array element\n              <tr key={debit.key}>\n                <td>{debit.debit.description}</td>\n                <td>{debit.debit.amount.toFixed(2)}</td>\n                <td>{debit.debit.date}</td>\n              </tr>\n\t    ))\n\t    : null\n    ) \n  }\n\n  // Create view for displaying the account balance\n  const accountBalanceView = () => (<AccountBalance accountBalance={props.accountBalance} />)\n\n  // When user clicked \"Add Debit\" button, store form data and then update state through props\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // Create new debits object using form data\n    let newDebit = {\n      description: e.target.description.value,\n      amount: Number(e.target.amount.value),\n      date: new Date().toISOString(),\n      key: props.debits.length,\n    }\n\n    props.addDebit({debit: newDebit})  // Update state in the top-level component (App.js)\n\n    // Reset form fields\n    e.target.description.value = \"\";\n    e.target.amount.value = \"\";\n  }\n\n  // Render the list of Debit items and a form to input new Debit item\n  return (\n    <div>\n      <h1>Debits</h1>\n      <br />\n      <table>\n        <thead>\n          <tr>\n            <th>Description</th>\n            <th>Amount</th>\n            <th>Date</th>\n\t  </tr>\n\t</thead>\n\t<tbody>\n          {debitsView()}\n\t</tbody>\n      </table>\n      <br/>\n      <form onSubmit={handleSubmit}>\n\t<label name=\"description\">Description:</label>\n        <input type=\"text\" name=\"description\" />\n\t<label name=\"amount\">Amount:</label>\n        <input type=\"number\" step=\"0.01\" name=\"amount\" />\n        <button type=\"submit\">Add Debit</button>\n      </form>\n      <br/>\n      {accountBalanceView()}\n      <br/>\n      <Link to=\"/\">Return to Home</Link>\n    </div>\n  )\n}\n\nexport default Debits;\n","/*==================================================\nsrc/App.js\n\nThis is the top-level component of the app.\nIt contains the top-level state.\n==================================================*/\nimport React, {Component} from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\n// Import other components\nimport Home from './components/Home';\nimport UserProfile from './components/UserProfile';\nimport LogIn from './components/Login';\nimport Credits from './components/Credits';\nimport Debits from './components/Debits';\n\nclass App extends Component {\n  constructor() {  // Create and initialize state\n    super(); \n    this.state = {\n      accountBalance: 1234567.89,\n      debitList: [],\n      totalDebits: 0,\n      creditList: [],\n      totalCredits: 0,\n      currentUser: {\n        userName: 'Joe Smith',\n        memberSince: '11/22/99',\n      },\n    }\n  }\n  \n  // Update state's currentUser (userName) after \"Log In\" button is clicked\n  mockLogIn = (logInInfo) => {  \n    const newUser = {...this.state.currentUser}\n    newUser.userName = logInInfo.userName\n    this.setState({currentUser: newUser})\n  }\n\n  updateAccountBalance = () => {\n    this.setState({accountBalance : Number(this.state.totalCredits - Number(this.state.totalDebits)).toFixed(2)})\n  }\n  \n  // Update state's creditList (array) based on user input of new credits, update totalCredits based on credit's amount\n  addCredit = (credit) => {\n    const newCreditList = this.state.creditList;\n    credit.key = newCreditList.length;\n    newCreditList.push(credit);\n    this.setState({ totalCredits: (Number(this.state.totalCredits) + Number(credit.credit.amount)).toFixed(2) })\n    this.setState({ creditList: newCreditList });\n  }\n\n  // Update state's debitList (array) based on user input of new debits, update totalDebits based on debit amount\n  addDebit = (debit) => {\n    const newDebitList = this.state.debitList;\n    debit.key = newDebitList.length;\n    newDebitList.push(debit);\n    this.setState({ totalDebits: (Number(this.state.totalDebits) + Number(debit.debit.amount)).toFixed(2) })\n    this.setState({ debitList: newDebitList });\n  }\n\n  // Lifecycle method that updates the state using data from API requests\n  componentDidMount() {\n    // Fetch Credits data from API\n    fetch(\"https://moj-api.herokuapp.com/credits\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        for (const credit of data) {\n          this.addCredit({credit});\n\t}\n      })\n\n    // Fetch Debits data from API\n    fetch(\"https://moj-api.herokuapp.com/debits\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        for (const debit of data) {\n          this.addDebit({debit});\n\t}\n      })\n  }\n\n  // Lifecycle method that updates the accountBalance when a credit or debit is added\n  componentDidUpdate(prevProps, prevState) {\n    if(this.state.totalCredits !== prevState.totalCredits || this.state.totalDebits !== prevState.totalDebits) {\n\t    this.updateAccountBalance();\n    }\n  }\n\n  // Create Routes and React elements to be rendered using React components\n  render() {  \n    // Create React elements and pass input props to components\n    const HomeComponent = () => (<Home accountBalance={this.state.accountBalance} />);\n    const UserProfileComponent = () => (<UserProfile userName={this.state.currentUser.userName}\n\t                                     memberSince={this.state.currentUser.memberSince}\n        />);\n    const LogInComponent = () => (<LogIn user={this.state.currentUser} mockLogIn={this.mockLogIn} />);\n    const DebitsComponent = () => (<Debits debits={this.state.debitList} \n\t                                     addDebit={this.addDebit}\n\t                                     accountBalance={this.state.accountBalance}\n\t                                     updateAccountBalance={this.updateAccountBalance}\n        />);\n    const CreditsComponent = () => (<Credits credits={this.state.creditList} \n\t\t                             addCredit={this.addCredit}\n\t\t                             accountBalance={this.state.accountBalance}\n\t                                     updateAccountBalance={this.updateAccountBalance}\n\t/>);\n\n    // Important: Include the \"basename\" in Router, which is needed for deploying the React app to GitHub Pages\n    return (\n      <Router basename=\"/bank-of-react\">\n        <div>\n          <Route exact path=\"/\" render={HomeComponent}/>\n          <Route exact path=\"/userProfile\" render={UserProfileComponent}/>\n          <Route exact path=\"/login\" render={LogInComponent}/>\n          <Route exact path=\"/credits\" render={CreditsComponent}/>\n          <Route exact path=\"/debits\" render={DebitsComponent}/>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/*==================================================\nsrc/index.js\n\nThis file renders the top-level component App which contains all components of the app).\n==================================================*/\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// Note: In above, StrictMode is a tool for highlighting potential problems in an application. \n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}